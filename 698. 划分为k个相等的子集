#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;

bool canPartitionKSubsets(vector<int>& nums, int k) {
	int sum = 0;
	for (int i=0;i<nums.size();i++)
	{
		sum += nums[i];
	}
	if (sum%k!=0)
	{
		return false;
	}
	sum = sum / k;//求出每个子集的和
	sort(nums.begin(), nums.end());//排序，从小到大
	if (nums[nums.size()-1]>sum)
	{
		return false;//最大元素值大于子集和返回false
	}
	vector<int> bucket(k, sum);
	return dfs(bucket, nums,nums.size() - 1, k);
}
bool dfs(vector<int> vec, vector<int> nums,int cur, int k) {
	if (cur<0)
	{
		return true;//递归终止条件
	}
	for (int i=0;i<k;i++)
	{
		if (vec[i]==nums[cur] || vec[i]-nums[cur]>=nums[0])
		{
			vec[i] -= nums[cur];
			if (dfs(vec,nums,cur-1,k))
			{
				return true;
			}
			vec[i] += nums[cur];
		}
	}
	return false;
}
int main() {
	vector<int> nums = { 10,10,10,7,7,7,7,7,7,6,6,6 };
	int k = 3;
	cout << canPartitionKSubsets(nums, k) << endl;
	return 0;
}
