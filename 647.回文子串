#include<iostream>
#include<cstring>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

//马拉车算法+中心扩展，时间复杂度：O(n)
int countSubstrings(string s) {
	int n = s.size();
	string t = "$#";
	for (const char &c:s)
	{
		t += c;
		t += '#';
	}
	n = t.size();
	t += '!';
	auto f = vector<int>(n);
	int iMax = 0, rMax = 0, ans = 0;
	for (int i=1;i<n;i++)
	{
		//初始化f[i]
		f[i] = (i < rMax) ? min(rMax - i + 1, f[2 * iMax - i]) : 1;

		//中心扩展
		while (t[i+f[i]]==t[i-f[i]])
		{
			++f[i];
		}
		//动态维护iMax和rMax
		if (i+f[i]-1>rMax)
		{
			iMax = i;
			rMax = i + f[i] - 1;
		}
		//统计答案,当前贡献为(f[i]-1)/2向上取整，除以2是为了去掉之前加的特殊符号情况
		ans += (f[i]) / 2;
	}
	return ans;
}

//动态规划：O(n^2)
int dpcount(string s) {
	int n = s.size();
	int result = 0;
	vector<vector<int> > dp(n,vector<int>(n,0));
	for (int i=0;i<n;i++)
	{
		dp[i][i] = 1;
	}
	for (int j=0;j<n;j++)
	{
		for (int i=0;i<=j;i++)
		{

			if (i==j)
			{
				dp[i][j] = 1;
				result++;
			}
			else if (j-1==i && s[i]==s[j])
			{
				dp[i][j] = 1;
				result++;
			}
			else if (j-i>1 && dp[i+1][j-1]==1 && s[i]==s[j])
			{
				dp[i][j] = 1;
				result++;
			}
		}
	}
	return result;
}
int main() {
	string s = "aaa";
	cout << countSubstrings(s) << endl;
	cout << dpcount(s) << endl;
	return 0;
}
